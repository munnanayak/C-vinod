class complex(operator overloading)


#include <iostream>

using namespace std;

  class Complex
{
 public:
         int real;
         int img;
         
         
 /*public:
        complex(int c=0;int i=0)
    {
        real=r;
        img=i;
    }  */  
    
 Complex operator+(Complex c)  
    {
        Complex temp;
        temp.real =real+c.real;
        temp.img = img+c.img;
        return temp;
    }
};
    
      int main()
    {
        Complex c1,c2,c3;
        c1.real=5;c1.img=7;
        c2.real=4;c2.img=6;
        c3=c1+c2;
        cout<<c3.real<<"+"<<c3.img<<"i"<<endl;
        return 0;

    }

INHERITENCE OF CLASS

#include <iostream>

using namespace std;

 class Base
{
  public:
     int a;   
    void display()
 {
     cout<<"Display of Base :"<<a<<endl;
 }
    
 };
 
class Derived:public Base
  {
    public:
         
    void show() 
    {
        cout<< " Show of Derived "<<endl;
    }
  };
  
  int main()
  {
      Derived d;
      d.a=100;
      d.display();
      d.show();
      return 0;
  }
VOLUME OF CUBOID

#include <iostream>

using namespace std;

 class Rectangle
 {
     private:
             int length;
             int breadth;
     public:
             Rectangle();
             Rectangle(int l,int b);
             Rectangle(Rectangle &r);
             int getlength(){ return length;}
             int getbreadth(){ return breadth;}
             void setlength(){ int l;}
             void setbreadth(){ int b;}
             int area();
             int perimeter();
             bool isSquare();
             
 };
 
 class Cuboid:public Rectangle
 {
     private:
             int height;
    public:
       Cuboid(int h)
       {
           height=h;
       }
        int getheight()
        { return height;}
        void setheight(int h)
        { height =h;}
        int volume()
        {
           return getlenght() * getbreadth() * height;
            
        }
 };
 
 int main()
 {
     Cuboid c(5);
     c.setlength(10);
     c.setbreadth(7);
     cout<<"Volume is :"<<c.volume()<<endl;
 }
 
