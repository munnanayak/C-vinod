adding two numbers

#include <iostream>

using namespace std;

int add(int x,int y)
{
   int z;
   z=x+y;
    return z;
}
 
int main()
   {
     int x=10, y=15, z;
     z=add(x,y);
     cout<<"sum is :"<<z<<endl;
     return 0;
    }
    
    Maximun number
    
    #include <iostream>

using namespace std;

int maxim(int a,int b,int c)
{
   if(a>b && a>c)
   return a;
   else
   if(b>c)
   return b;
   else
   return c;
   
}
 
int main()
   {
     int x=10, y=15, z=80,r;
     r=maxim(x,y,z);
     cout<<"Maximum no is :"<<r<<endl;
     return 0;
    }
    
    minimum number is
    
    #include <iostream>

using namespace std;

int mini(int a,int b,int c)
{
   if(a<b && a<c)
   return a;
   else
   if(b<c)
   return b;
   else
   return c;
   
}
 
int main()
   {
     int x=10, y=15, z=80,r;
     r=mini(x,y,z);
     cout<<"Minimum no is :"<<r<<endl;
     return 0;
    }
    
    power of numbers
    #include <iostream>
    using name space std;
    int pow(int m,int n )
{
   int p=1;
   for(int i=0;i<n;i++)
   {
       p=p*m;
   }
   return p;
   
}
 
int main()
   {
     
     
     cout<<pow(7,3)<<endl;
     return 0;
    }
    
    sum of overflow of numbers
    
    // A C/C++ Program to generate OTP (One Time Password)

#include<bits/stdc++.h>
using namespace std;

// A Function to generate a unique OTP everytime
int add1(int x,int y,int z)
 {
     return x+y+z;
 }
int add(int x,int y)
{
  return x+y; 
}
 
 float add2(float i,float j)
 {
    return i+j; 
 }
 
int main()
   {
     int a=10,b=16,c,d;
     c=add(a,b);
     d=add1(a,b,c);
     float i=5.5,j=8.9,k;
     k=add2(i,j);
     cout<<c<<endl;
     cout<<d<<endl;
     cout<<k<<endl;
     return 0;
     
    }
over flowing minimum numbers

#include <iostream>

using namespace std;

int mini(int a,int b,int c )
{
  if(a<b && a<c)
  {
      return a;
  }
      else
      
      if(b<c)
      {
      return b;
      }
      
      else
      {
      return c;
      
      
      }
  }
  int mini(int x,int y)
  {
  if(x<y )
  {
      return x;
  }
      else
      return y;
  
  }
  float mini(float i,float j)
  {
      if(i<j )
  {
      return i;
  }
      else
      return j;
  
  }
  
  
  int main()
  {
      int a=4,b=8,c=6,d;
      d=mini(a,b,c);
      int x=9,y=7,z;
      z=mini(x,y);
      
      float i=3.5, j=9.8,k;
      k=mini(i,j);
      
      cout<<"minimun is ;"<<d<<endl;
      cout<<"minimun is :"<<z<<endl;
      cout<<"minimun is :"<<k<<endl;
  
      return 0;
  }
  template Maximum
  
  #include <iostream>

using namespace std;
template <class T>

    T Max(T x,T y )
{
  if(x>y)
  
      return x;
  
      else
      return y;
  }

    int main()
  {
    cout<<Max(10,5)<<endl;
    cout<<Max(12.5f,17.3f);
    return 0;
  }
  
  #include <iostream>

using namespace std;

int max(int a,int b,int c=0)

{
    return a>b && a>c ? a:(b>c ? b:c);
}
 main()
 {
     cout<<max(5,10)<<endl;
     cout<<max(5,10,18)<<endl;
     return 0;
 }
 
 passing value method
 
 #include <iostream>

using namespace std;

  void swap(int a,int b)

{
    int temp;
    temp=a;
    a=b;
    a=temp;
}
  int main()
 {
     int x=10,y=20;
     swap(x,y);
     cout<<x<<" "<<y<<endl;
     return 0;
 }

 default argument sum of numbers
 
 #include <iostream>

using namespace std;

int sum(int a,int b,int c=0)
{
    return a+b+c;
}
 main()
 {
     cout<<sum(5,10)<<endl;
     cout<<sum(5,10,18)<<endl;
     return 0;
 }
 
 return to adress
 
 #include <iostream>

using namespace std;

  int * fun()
 {
         int *p=new int[5];
           for(int i=0;i<5;i++) 
     {
       p[i]=5*i;  
     }
     return p;
     cout<<p<<endl;
 }
   int main()
{
    int *q=fun();
    for(int i=0;i<5;i++) 
         cout<< q[i]<<endl;
       cout<<q<<endl;
    
    return 0;
    
}
return to refarence

#include <iostream>

using namespace std;

  int & fun(int &x)
 {
       return x;    
 }
   int main()
{
    int a=10;
    fun(a)=25;
    cout<<a<<endl;
    return 0;
    
}
scroping rule

#include <iostream>

using namespace std;

  
  int x=10;
  int main()
  {
      int x=20;
      
      {
          int x=30;
          cout<<x<<endl;
      }
      cout<<x<<endl;
      cout<<::x<<endl;
      return 0;
  }
  
  static variable
  
  #include <iostream>

using namespace std;

  
  
  void fun()
  {
      int a=20;
      static int v=0;
      v++;
      cout<<a<<" "<<v<<endl;
     
  }
  int main()
 {
     fun();
     fun();
     fun();
     return 0;
 }
 
 recursive funtions
 
 #include <iostream>

using namespace std;

  
  
  void fun(int n)
  {
        if(n>0)
      {
          fun(n-1);
        cout<<n<<endl;
        
      }
     
  }
  int main()
 {
     int x=5;
     fun(x);
     return 0;
 }
