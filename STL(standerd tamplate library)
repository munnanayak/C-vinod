
using iterator(vector)

#include <iostream>
#include<vector>
using namespace std;

int main()
{
    vector<int> v={2,4,6,8,10};
    v.push_back(20);
    v.push_back(80);
    
    vector<int>::iterator itr;
    cout<<"using Iterator"<<endl;
    for(itr=v.begin();itr!=v.end();itr++)
    cout<<++*itr<<endl;
    
    cout<<"using for each loop"<<endl;
    
    for( int x:v)
    cout<<x<<endl;
    

    return 0;
}

using iterator(list)

#include <iostream>
#include<list>
using namespace std;

int main()
{
    list<int> v={2,4,6,8,10};
    v.push_back(20);
    v.push_back(80);
    
    list<int>::iterator itr;
    cout<<"using Iterator"<<endl;
    for(itr=v.begin();itr!=v.end();itr++)
    cout<<++*itr<<endl;
    
    cout<<"using for each loop"<<endl;
    
    for( int x:v)
    cout<<x<<endl;
    

    return 0;
}

using iterator(forward_list)
#include <iostream>
#include<forward_list>
using namespace std;

int main()
{
    forward_list<int> v={2,4,6,8,10};
    v.push_front(20);
    v.push_front(80);
    
    forward_list<int>::iterator itr;
    cout<<"using Iterator"<<endl;
    for(itr=v.begin();itr!=v.end();itr++)
    cout<<++*itr<<endl;
    
    cout<<"using for each loop"<<endl;
    
    for( int x:v)
    cout<<x<<endl;
    

    return 0;
}


using iterator(set)

#include <iostream>
#include<set>
using namespace std;

int main()
{
    set<int> v={2,4,6,8,10,10};
    v.insert(20);
    v.insert(80);
    
    set<int>::iterator itr;
    cout<<"using Iterator"<<endl;
    for(itr=v.begin();itr!=v.end();itr++)
    cout<<*itr<<endl;
    
    cout<<"using for each loop"<<endl;
    
    for( int x:v)
    cout<<x<<endl;
    

    return 0;
}


MAP CLASS


int main()
{
   map<int,string> m;
   m.insert(pair<int, string>(1,"john"));
    m.insert(pair<int, string>(2,"nayak"));
     m.insert(pair<int, string>(3,"vinod"));
     m.insert(pair<int, string>(4,"ashok"));
     
     map<int,string>::iterator itr;
     for(itr=m.begin();itr!=m.end();itr++)
     {
         cout<<itr->first<<" "<<itr->second<<endl;
     }
       map<int,string>::iterator itr1;
       itr1=m.find(3);
       cout<<"Value found is"<<endl;
        cout<<itr1->first<<" "<<itr1->second<<endl;

    return 0;
}
